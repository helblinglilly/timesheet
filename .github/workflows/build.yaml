name: Build and Publish Docker Image

on:
  push:
    branches: [ "t3" ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on: ubuntu-24.04-arm
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=schedule
            type=ref,event=branch
            type=ref,event=tag
            type=ref,event=pr
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/arm64
          # platforms: linux/arm64,linux/amd64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            POCKETBASE_URL=${{ secrets.POCKETBASE_URL }}
            NODE_ENV=production

  deploy:
    runs-on: production
    needs: build
    steps:
      - name: Stop and remove old container
        run: |
          docker compose -f ~/timesheet.docker-compose.yaml down || true

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GHCR_PAT }}" | docker login ghcr.io -u helblinglilly --password-stdin

      - name: Launch docker-compose
        run: docker compose -f ~/timesheet.docker-compose.yaml up -d

      - name: Remove dangling images
        run: docker image prune -a -f
